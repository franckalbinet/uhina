"""Convert spectra to wavelet images."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_cli.ipynb.

# %% auto 0
__all__ = ['main', 'load_config', 'extract_params', 'get_loader', 'create_output_files']

# %% ../nbs/03_cli.ipynb 2
from fastcore.script import *
import yaml
from pathlib import Path
from typing import Optional, List

import numpy as np
from .wavelets import (
    convert_to_wavelet_images, 
    create_image_target_csv, 
    estimate_percentiles)
from sklearn.pipeline import Pipeline
from .preprocessing import SNV, TakeDerivative
from .loading import LoaderFactory

# %% ../nbs/03_cli.ipynb 3
@call_parse
def main(
    config: Path, # Path to the configuration file
    ):
    "Convert spectra to wavelet images using configuration from a file."
    cfg = load_config(config)
    params = extract_params(cfg)
    loader = get_loader(params)
    data = loader.load_data(params['analytes'])
    create_output_files(data, params)

# %% ../nbs/03_cli.ipynb 4
def load_config(config_path: Path) -> dict:
    "Load the configuration from a YAML file."
    with open(config_path, 'r') as f:
        return yaml.safe_load(f)

# %% ../nbs/03_cli.ipynb 5
def extract_params(cfg: dict) -> dict:
    "Extract parameters from the configuration."
    return {
        'src': cfg['src'],
        'dir_out': cfg['dir_out'],
        'img_dir': cfg.get('img_dir', 'im'),
        'dataset': cfg.get('dataset', 'ossl'),
        'spectra_type': cfg.get('spectra_type', 'mir'),
        'analytes': cfg.get('analytes', 'k.ext_usda.a725_cmolc.kg'),
        'n_samples': cfg.get('n_samples'),
        'batch_size': cfg.get('batch_size', 10)
    }

# %% ../nbs/03_cli.ipynb 6
def get_loader(params: dict):
    "Get the loader from the parameters."
    loader_kwargs = {'spectra_type': params['spectra_type']} if params['dataset'] == 'ossl' else {}
    return LoaderFactory.get_loader(params['src'], params['dataset'], **loader_kwargs)

# %% ../nbs/03_cli.ipynb 7
def create_output_files(data, params):
    "Create the output files."
    print(f'Creating image target csv in {params["dir_out"]} ...')
    create_image_target_csv(data, 
                            n_samples=params['n_samples'], 
                            output_dir=Path(params['dir_out']))  
    
    print(f'Creating wavelet images in {Path(params["dir_out"])/params["img_dir"]} ...')
    convert_to_wavelet_images(data, 
                              output_dir=Path(params['dir_out'])/params['img_dir'], 
                              n_samples=params['n_samples'],
                              batch_size=params['batch_size'])
