"""Simple wrapper around `pywt.cwt` to perform continuous wavelet transform."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_wavelets.ipynb.

# %% auto 0
__all__ = ['CWT', 'estimate_conversion_time']

# %% ../nbs/02_wavelets.ipynb 2
import pycwt
from pycwt import cwt
import fastcore.all as fc
import numpy as np
import matplotlib.pyplot as plt
from multiprocessing import Pool, cpu_count
import os


# %% ../nbs/02_wavelets.ipynb 4
class CWT: 
    def __init__(self, data, dt=2, mother=pycwt.Morlet(6)):
        fc.store_attr()
        self.normalize()
        self.init_params()
        
    def init_params(self):
        self.N = self.data.size
        self.s0 = 2 * self.dt  # Starting scale, in this case 2 * 0.25 years = 6 months  
        self.dj = 1 / 12  # Twelve sub-octaves per octaves
        self.J = 7 / self.dj  # Seven powers of two with dj sub-octaves
            
    def normalize(self):
        self.std = self.data.std()  # Standard deviation
        self.var = self.std ** 2  # Variance
        self.data /= self.std  # Normalized dataset
    
    def get_wavelet(self):
        cwt_results = cwt(self.data, self.dt, self.dj, self.s0, self.J, self.mother)
        (self.wave, self.scales, self.freqs, self.coi, self.fft, self.fftfreqs) = cwt_results
    
    def get_powers(self):    
        self.power = (np.abs(self.wave)) ** 2
    
    def get_period(self): 
        self.period = 1 / self.freqs
    
    def __call__(self):
        self.get_wavelet()
        self.get_powers()
        self.get_period()
        return self

# %% ../nbs/02_wavelets.ipynb 9
def estimate_conversion_time(seconds=1000, samples=1000):
    """Estimate the time to convert all spectra to images."""
    return seconds * (samples / 1000) / 60
    # print(f'Estimated time: {time:.2f} minutes')
